"""
CLIÁî®Êà∑ÁïåÈù¢
Êèê‰æõAthensÁ≥ªÁªüÁöÑÂëΩ‰ª§Ë°å‰∫§‰∫íÁïåÈù¢Ôºå‰ΩøÁî®RichÂ∫ìÁæéÂåñÊòæÁ§∫
"""

from typing import Optional, Dict, Any
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.table import Table
from rich.layout import Layout
from rich.prompt import Prompt
from rich.style import Style
from rich.markdown import Markdown
from rich import box
from datetime import datetime

from src.core.message import Message
from src.core.debate_states import DebateState


class CLIInterface:
    """
    ÂëΩ‰ª§Ë°åÁïåÈù¢ÊéßÂà∂Âô®
    Ë¥üË¥£ÊòæÁ§∫ÁïåÈù¢„ÄÅÂ§ÑÁêÜÁî®Êà∑ËæìÂÖ•ÂíåÁæéÂåñËæìÂá∫
    """
    
    # È¢ÑËÆæ‰∏ªÈ¢òÈÖçËâ≤ÊñπÊ°à
    THEMES = {
        "default": {
            "name": "ÈªòËÆ§‰∏ªÈ¢ò",
            "title": "bold blue",
            "header": "bold green", 
            "apollo": "blue",
            "muses": "red",
            "user": "yellow",
            "system": "dim white",
            "success": "green",
            "error": "red",
            "warning": "yellow",
            "info": "cyan",
            "panel_title": "blue",
            "panel_border": {"apollo": "blue", "muses": "red", "user": "yellow", "system": "white"}
        },
        "dark": {
            "name": "Ê∑±Ëâ≤‰∏ªÈ¢ò",
            "title": "bold bright_white",
            "header": "bold bright_green", 
            "apollo": "bright_cyan",
            "muses": "bright_magenta",
            "user": "bright_yellow",
            "system": "dim bright_white",
            "success": "bright_green",
            "error": "bright_red",
            "warning": "bright_yellow",
            "info": "bright_blue",
            "panel_title": "bright_white",
            "panel_border": {"apollo": "bright_cyan", "muses": "bright_magenta", "user": "bright_yellow", "system": "bright_white"}
        },
        "forest": {
            "name": "Ê£ÆÊûó‰∏ªÈ¢ò",
            "title": "bold green",
            "header": "bold dark_green", 
            "apollo": "dark_green",
            "muses": "dark_orange3",
            "user": "gold1",
            "system": "dim grey70",
            "success": "green",
            "error": "red3",
            "warning": "orange3",
            "info": "dark_turquoise",
            "panel_title": "green",
            "panel_border": {"apollo": "dark_green", "muses": "dark_orange3", "user": "gold1", "system": "grey70"}
        },
        "ocean": {
            "name": "Êµ∑Ê¥ã‰∏ªÈ¢ò",
            "title": "bold deep_sky_blue1",
            "header": "bold blue", 
            "apollo": "deep_sky_blue1",
            "muses": "medium_purple",
            "user": "turquoise2",
            "system": "dim slate_blue1",
            "success": "sea_green2",
            "error": "red",
            "warning": "orange1",
            "info": "cornflower_blue",
            "panel_title": "deep_sky_blue1",
            "panel_border": {"apollo": "deep_sky_blue1", "muses": "medium_purple", "user": "turquoise2", "system": "slate_blue1"}
        },
        "sunset": {
            "name": "Êó•ËêΩ‰∏ªÈ¢ò",
            "title": "bold orange1",
            "header": "bold red", 
            "apollo": "orange1",
            "muses": "red3",
            "user": "yellow",
            "system": "dim grey70",
            "success": "green",
            "error": "red",
            "warning": "orange3",
            "info": "magenta",
            "panel_title": "orange1",
            "panel_border": {"apollo": "orange1", "muses": "red3", "user": "yellow", "system": "grey70"}
        },
        "minimal": {
            "name": "ÊûÅÁÆÄ‰∏ªÈ¢ò",
            "title": "bold white",
            "header": "bold white", 
            "apollo": "white",
            "muses": "grey70",
            "user": "bright_white",
            "system": "dim grey50",
            "success": "white",
            "error": "bright_white",
            "warning": "white",
            "info": "grey70",
            "panel_title": "white",
            "panel_border": {"apollo": "white", "muses": "grey70", "user": "bright_white", "system": "grey50"}
        }
    }
    
    def __init__(self, theme_name: str = "default"):
        self.console = Console()
        self.current_theme_name = theme_name
        self.theme = self.THEMES[theme_name]
    
    def show_welcome(self) -> None:
        """ÊòæÁ§∫Ê¨¢ËøéÁïåÈù¢"""
        self.console.clear()
        
        # ÂàõÂª∫Ê†áÈ¢òÈù¢Êùø
        title_text = Text("Athens ÊÄùËæ®ÂπøÂú∫ MVP", style="bold blue")
        title_text.append("\nÊô∫ËÉΩËæ©ËÆ∫Á≥ªÁªü", style="dim white")
        
        title_panel = Panel(
            title_text,
            title="üèõÔ∏è Ê¨¢Ëøé‰ΩøÁî®",
            title_align="center",
            box=box.DOUBLE,
            style="blue",
            padding=(1, 2)
        )
        
        self.console.print(title_panel)
        self.console.print()
        
        # ÊòæÁ§∫Á≥ªÁªü‰ø°ÊÅØ
        info_table = Table(show_header=False, box=box.SIMPLE)
        info_table.add_column("È°πÁõÆ", style="dim white", no_wrap=True)
        info_table.add_column("ÊèèËø∞", style="white")
        
        info_table.add_row("ü§ñ Êô∫ËÉΩ‰Ωì", "ÈÄªËæëËÄÖ & ÊÄÄÁñëËÄÖ")
        info_table.add_row("üí¨ Ê∂àÊÅØÁ≥ªÁªü", "ÂÆûÊó∂ÈÄö‰ø°‰∏é‰∏ä‰∏ãÊñáÁÆ°ÁêÜ")
        info_table.add_row("üéØ Ëæ©ËÆ∫ÁÆ°ÁêÜ", "Áä∂ÊÄÅÊéßÂà∂‰∏éËΩÆÊ¨°ÁÆ°ÁêÜ")
        info_table.add_row("üë§ Áî®Êà∑ÂèÇ‰∏é", "ËßÇÂØüÊ®°Âºè & ÂèÇ‰∏éÊ®°Âºè")
        
        self.console.print(Panel(info_table, title="Á≥ªÁªüÁªÑ‰ª∂", border_style="green"))
        self.console.print()
    
    def show_menu(self) -> None:
        """ÊòæÁ§∫‰∏ªËèúÂçï"""
        menu_table = Table(show_header=False, box=box.ROUNDED)
        menu_table.add_column("ÈÄâÈ°π", style="bold", width=8)
        menu_table.add_column("ÊèèËø∞", style="white")
        menu_table.add_column("ËØ¥Êòé", style="dim white")
        
        menu_table.add_row(
            "[1]", 
            "ËßÇÂØüÊ®°Âºè", 
            "ËßÇÁúãAIÊô∫ËÉΩ‰ΩìËá™Âä®Ëæ©ËÆ∫"
        )
        menu_table.add_row(
            "[2]", 
            "ÂèÇ‰∏éÊ®°Âºè", 
            "Âú®Ëæ©ËÆ∫‰∏≠ÂÆûÊó∂ÂèÇ‰∏é‰∫íÂä®"
        )
        menu_table.add_row(
            "[3]", 
            "Êü•ÁúãÁ§∫‰æã", 
            "ËøêË°åÈ¢ÑËÆæËØùÈ¢òÁöÑÁ§∫‰æãËæ©ËÆ∫"
        )
        menu_table.add_row(
            "[4]", 
            "Â∏ÆÂä©‰ø°ÊÅØ", 
            "‰∫ÜËß£‰ΩøÁî®ÊñπÊ≥ïÂíåÊåá‰ª§"
        )
        menu_table.add_row(
            "[0]", 
            "ÈÄÄÂá∫Á≥ªÁªü", 
            "ÁªìÊùüÁ®ãÂ∫è"
        )
        
        self.console.print(Panel(menu_table, title="üéØ ËØ∑ÈÄâÊã©Ê®°Âºè", border_style="cyan"))
        self.console.print()
    
    def get_user_choice(self) -> str:
        """Ëé∑ÂèñÁî®Êà∑ÈÄâÊã©"""
        choice = Prompt.ask(
            "[bold cyan]ËØ∑ËæìÂÖ•ÈÄâÈ°π[/bold cyan]",
            choices=["0", "1", "2", "3", "4"],
            default="1"
        )
        return choice
    
    def get_user_input(self, prompt: str = "ËØ∑ËæìÂÖ•") -> str:
        """Ëé∑ÂèñÁî®Êà∑ËæìÂÖ•"""
        return Prompt.ask(f"[bold yellow]{prompt}[/bold yellow]")
    
    def display_message(self, message: Message) -> None:
        """ÊòæÁ§∫ÂçïÊù°Ê∂àÊÅØÔºàÂ∏¶ËæπÊ°ÜÁöÑÂØåÊñáÊú¨Ê†ºÂºèÔºâ"""
        # Ëé∑ÂèñÂèëÈÄÅËÄÖÂêçÁß∞ÔºàÂ¶ÇÊûúÊòØÂØπË±°ÔºåÊèêÂèñÂÖ∂ÂêçÁß∞ÊàñÁ±ªÂêçÔºâ
        sender_name = self._get_sender_display_name(message.sender)
        
        # Ê†πÊçÆÂèëÈÄÅËÄÖÈÄâÊã©Ê†∑Âºè
        if sender_name in ["Apollo", "ÈÄªËæëËÄÖ", "Logician"] or "apollo" in sender_name.lower() or "logician" in sender_name.lower():
            style = self.theme["apollo"]
            icon = "ü§î"
            border_style = self.theme["panel_border"]["apollo"]
            display_name = "Apollo"
        elif sender_name in ["Muses", "ÊÄÄÁñëËÄÖ", "Skeptic"] or "muses" in sender_name.lower() or "skeptic" in sender_name.lower():
            style = self.theme["muses"] 
            icon = "ü§®"
            border_style = self.theme["panel_border"]["muses"]
            display_name = "Muses"
        elif sender_name in ["Áî®Êà∑", "User"] or "user" in sender_name.lower():
            style = self.theme["user"]
            icon = "üë§"
            border_style = self.theme["panel_border"]["user"]
            display_name = "Áî®Êà∑"
        else:
            style = self.theme["system"]
            icon = "üí¨"
            border_style = self.theme["panel_border"]["system"]
            display_name = sender_name
        
        # Ê†ºÂºèÂåñÊó∂Èó¥
        time_str = message.timestamp.strftime("%H:%M:%S")
        
        # ÂàõÂª∫Ê†áÈ¢òÔºàÂèëÈÄÅËÄÖÂíåÊó∂Èó¥Ôºâ
        title = f"{icon} {display_name} [{time_str}]"
        
        # ‰ΩøÁî®MarkdownÊ∏≤ÊüìÊ∂àÊÅØÂÜÖÂÆπ
        markdown_content = Markdown(message.content)
        
        # ÂàõÂª∫Â∏¶ËæπÊ°ÜÁöÑÊ∂àÊÅØÈù¢Êùø
        message_panel = Panel(
            markdown_content,
            title=title,
            title_align="left",
            border_style=border_style,
            box=box.ROUNDED,
            padding=(0, 1),
            width=80  # Âõ∫ÂÆöÂÆΩÂ∫¶Á°Æ‰øù‰∏ÄËá¥ÊÄß
        )
        
        self.console.print(message_panel)
    
    def _get_sender_display_name(self, sender) -> str:
        """Ëé∑ÂèñÂèëÈÄÅËÄÖÁöÑÊòæÁ§∫ÂêçÁß∞"""
        if isinstance(sender, str):
            return sender
        elif hasattr(sender, 'name'):
            return sender.name
        elif hasattr(sender, '__class__'):
            class_name = sender.__class__.__name__
            if 'Logician' in class_name:
                return "ÈÄªËæëËÄÖ"
            elif 'Skeptic' in class_name:
                return "ÊÄÄÁñëËÄÖ"
            else:
                return class_name
        else:
            return str(sender)
    
    def switch_theme(self, theme_name: str) -> bool:
        """ÂàáÊç¢‰∏ªÈ¢ò"""
        if theme_name in self.THEMES:
            self.current_theme_name = theme_name
            self.theme = self.THEMES[theme_name]
            return True
        return False
    
    def show_theme_selector(self) -> str:
        """ÊòæÁ§∫‰∏ªÈ¢òÈÄâÊã©Âô®"""
        self.console.print(Panel("üé® ‰∏ªÈ¢òÈÄâÊã©Âô®", border_style=self.theme["panel_title"]))
        
        theme_table = Table(show_header=False, box=box.ROUNDED)
        theme_table.add_column("ÁºñÂè∑", style="bold", width=6)
        theme_table.add_column("‰∏ªÈ¢òÂêç", style="white", width=15)
        theme_table.add_column("ÊèèËø∞", style="dim white")
        theme_table.add_column("ÂΩìÂâç", style="green", width=6)
        
        for i, (key, config) in enumerate(self.THEMES.items(), 1):
            current = "‚úÖ" if key == self.current_theme_name else ""
            theme_table.add_row(
                f"[{i}]",
                config["name"],
                f"Êô∫ËÉΩ‰Ωì: {config['apollo']}, {config['muses']}, {config['user']}",
                current
            )
        
        self.console.print(theme_table)
        
        choice = Prompt.ask(
            "[bold cyan]ËØ∑ÈÄâÊã©‰∏ªÈ¢ò[/bold cyan]",
            choices=["1", "2", "3", "4", "5", "6"],
            default="1"
        )
        
        theme_keys = list(self.THEMES.keys())
        selected_theme = theme_keys[int(choice) - 1]
        
        return selected_theme
    
    def demo_all_themes(self) -> None:
        """ÊºîÁ§∫ÊâÄÊúâ‰∏ªÈ¢òÊïàÊûú"""
        from src.core.message import Message, MessageType
        
        # ÂàõÂª∫Á§∫‰æãÊ∂àÊÅØ
        sample_msg = Message(
            "# ‰∏ªÈ¢òÊºîÁ§∫\n\nËøôÊòØ‰∏Ä‰∏™**Á§∫‰æãÊ∂àÊÅØ**ÔºåÁî®Êù•Â±ïÁ§∫*‰∏çÂêå‰∏ªÈ¢ò*ÁöÑÊïàÊûú„ÄÇ\n\n- ÂàóË°®È°π1\n- `‰ª£Á†ÅÁ§∫‰æã`\n\n> ÂºïÁî®ÊñáÊú¨Á§∫‰æã",
            "ÈÄªËæëËÄÖ",
            MessageType.ARGUMENT
        )
        
        for theme_name, theme_config in self.THEMES.items():
            self.console.print(f"\n[bold white]üé® {theme_config['name']} ({theme_name})[/bold white]")
            self.console.print("‚îÄ" * 60)
            
            # ‰∏¥Êó∂ÂàáÊç¢‰∏ªÈ¢ò
            old_theme = self.current_theme_name
            self.switch_theme(theme_name)
            
            # ÊòæÁ§∫Á§∫‰æãÊ∂àÊÅØ
            self.display_message(sample_msg)
            
            # ÊÅ¢Â§çÂéü‰∏ªÈ¢ò
            self.switch_theme(old_theme)
    
    def show_success(self, message: str) -> None:
        """ÊòæÁ§∫ÊàêÂäüÊ∂àÊÅØ"""
        self.console.print(f"[green]‚úÖ {message}[/green]")
    
    def show_error(self, message: str) -> None:
        """ÊòæÁ§∫ÈîôËØØÊ∂àÊÅØ"""
        self.console.print(f"[red]‚ùå {message}[/red]")
    
    def show_warning(self, message: str) -> None:
        """ÊòæÁ§∫Ë≠¶ÂëäÊ∂àÊÅØ"""
        self.console.print(f"[yellow]‚ö†Ô∏è {message}[/yellow]")
    
    def show_info(self, message: str) -> None:
        """ÊòæÁ§∫‰ø°ÊÅØÊ∂àÊÅØ"""
        self.console.print(f"[cyan]‚ÑπÔ∏è {message}[/cyan]")


# ÁÆÄÂçïÁöÑÊµãËØïÂáΩÊï∞
def demo_cli():
    """ÊºîÁ§∫CLIÁïåÈù¢ÊïàÊûú"""
    cli = CLIInterface()
    
    # ÊòæÁ§∫Ê¨¢ËøéÁïåÈù¢
    cli.show_welcome()
    
    # ÊòæÁ§∫ËèúÂçï
    cli.show_menu()
    
    # ‰∏ªÈ¢òÈÄâÊã©
    print("\nÊòØÂê¶Ë¶ÅÂàáÊç¢‰∏ªÈ¢òÔºü(y/n): ", end="")
    if input().lower() == 'y':
        selected_theme = cli.show_theme_selector()
        cli.switch_theme(selected_theme)
        cli.show_success(f"Â∑≤ÂàáÊç¢Âà∞ {cli.theme['name']}")
        
        # ÈáçÊñ∞ÊòæÁ§∫Ê¨¢ËøéÁïåÈù¢Â±ïÁ§∫Êñ∞‰∏ªÈ¢ò
        cli.show_welcome()
    
    # ÊºîÁ§∫Ê∂àÊÅØÊòæÁ§∫
    from src.core.message import Message, MessageType
    
    cli.console.print(Panel("Ê∂àÊÅØÊòæÁ§∫ÊïàÊûúÊºîÁ§∫", title="üìù Demo", border_style=cli.theme["panel_title"]))
    
    # ÂàõÂª∫Á§∫‰æãÊ∂àÊÅØÔºàÊ†áÂáÜMarkdownÊ†ºÂºèÔºâ
    apollo_msg = Message(
        """# ElixirÂÆπÈîôÊÄßÂàÜÊûê

Âü∫‰∫é**ActorÊ®°Âûã**ÔºåElixirÁ°ÆÂÆûÂÖ∑Êúâ*Âá∫Ëâ≤ÁöÑÂÆπÈîôÊÄß*ÂíåÂπ∂ÂèëÂ§ÑÁêÜËÉΩÂäõ„ÄÇ

## ÂÖ≥ÈîÆÁâπÊÄß

1. **Let it crashÂì≤Â≠¶**
   - ËøõÁ®ãÈöîÁ¶ªÁ°Æ‰øùÈîôËØØ‰∏ç‰ºö‰º†Êí≠
   - Â§±Ë¥•Âø´ÈÄüÔºåÊÅ¢Â§çËøÖÈÄü

2. **ËΩªÈáèÁ∫ßËøõÁ®ã**
   - ÂèØ‰ª•ÂàõÂª∫Êï∞Áôæ‰∏á‰∏™Áã¨Á´ãËøõÁ®ã
   - ÂÜÖÂ≠òÂç†Áî®ÊûÅÂ∞èÔºà~2KBÔºâ

3. **ÁõëÁù£Ê†ëÊú∫Âà∂**
   - Ëá™Âä®ÈáçÂêØÂ§±Ë¥•ÁöÑËøõÁ®ã
   - Â±ÇÊ¨°ÂåñÁöÑÈîôËØØÂ§ÑÁêÜ

> Ëøô‰∫õÁâπÊÄß‰ΩøÂæóElixirÂú®ÊûÑÂª∫**È´òÂèØÁî®Á≥ªÁªü**ÊñπÈù¢ÂÖ∑ÊúâÂ§©ÁÑ∂‰ºòÂäø„ÄÇ

```elixir
# Á§∫‰æã‰ª£Á†Å
{:ok, pid} = GenServer.start_link(MyServer, [])
GenServer.call(pid, :get_state)
```""",
        "Apollo",
        MessageType.ARGUMENT
    )
    
    muses_msg = Message(
        """## ÂØπActorÊ®°ÂûãÁöÑË¥®Áñë

ËôΩÁÑ∂**ActorÊ®°Âûã**Á°ÆÂÆûÊúâ‰ºòÂäøÔºå‰ΩÜËøôÁßçËØ¥Ê≥ïËøá‰∫é*ÁªùÂØπ*„ÄÇ

### ÈúÄË¶ÅËÄÉËôëÁöÑÈóÆÈ¢ò

- **ÊÄßËÉΩÂºÄÈîÄ**
  - Ê∂àÊÅØ‰º†ÈÄíÊØîÂÖ±‰∫´ÂÜÖÂ≠òÊÖ¢
  - Â∫èÂàóÂåñ/ÂèçÂ∫èÂàóÂåñÊàêÊú¨
  
- **Áì∂È¢àÈóÆÈ¢ò**
  - `GenServer`ÂçïÁÇπÂèØËÉΩÊàê‰∏∫Áì∂È¢à
  - ÁÉ≠ÁÇπËøõÁ®ãÂ§ÑÁêÜËÉΩÂäõÊúâÈôê

- **Â≠¶‰π†Êõ≤Á∫ø**
  - ÂáΩÊï∞ÂºèÁºñÁ®ãÊÄùÁª¥ËΩ¨Êç¢Âõ∞Èöæ
  - OTPËÆæËÆ°Ê®°ÂºèÂ§çÊùÇ

### ÁªìËÆ∫

Âú®Êüê‰∫õÂú∫ÊôØ‰∏ãÔºå‰º†ÁªüÁöÑ**Â§öÁ∫øÁ®ãÊ®°Âûã**ÂèØËÉΩÊõ¥ÈÄÇÂêàÔºö

| Âú∫ÊôØ | Elixir | ‰º†ÁªüÂ§öÁ∫øÁ®ã |
|------|--------|------------|
| CPUÂØÜÈõÜ | ‚ùå | ‚úÖ |
| I/OÂØÜÈõÜ | ‚úÖ | ‚ùå |
| È´òÂπ∂Âèë | ‚úÖ | ‚ùå |""",
        "Muses", 
        MessageType.COUNTER
    )
    
    user_msg = Message(
        """@muses ÂÖ≥‰∫éÊÄßËÉΩÂºÄÈîÄÁöÑÈóÆÈ¢òÂæàÊúâÊÑèÊÄùÔºÅ

> ËÉΩÂê¶Êèê‰æõ‰∏Ä‰∏™**ÂÖ∑‰ΩìÁöÑÂü∫ÂáÜÊµãËØï**Êï∞ÊçÆÊù•ÊîØÊíë‰Ω†ÁöÑËßÇÁÇπÔºü

ÁâπÂà´ÊÉ≥‰∫ÜËß£Ôºö
- `Ê∂àÊÅØ‰º†ÈÄí vs ÂÖ±‰∫´ÂÜÖÂ≠ò`ÁöÑ*ÊÄßËÉΩÂØπÊØî*
- ‰∏çÂêåÂπ∂ÂèëÈáè‰∏ãÁöÑË°®Áé∞Â∑ÆÂºÇ
- ÂÆûÈôÖÁîü‰∫ßÁéØÂ¢ÉÁöÑÊ°à‰æã

ÊúüÂæÖ‰Ω†ÁöÑËØ¶ÁªÜÂàÜÊûêÔºÅ""",
        "Áî®Êà∑",
        MessageType.USER_INPUT
    )
    
    system_msg = Message(
        """### Á≥ªÁªüÈÄöÁü•

**Áä∂ÊÄÅÊõ¥Êñ∞**ÔºöÊ£ÄÊµãÂà∞Áî®Êà∑ÊèêÂèä `@muses`

- ‚úÖ Â∑≤ÈÄöÁü•MusesÊô∫ËÉΩ‰Ωì
- üìä ÂΩìÂâçËæ©ËÆ∫Áä∂ÊÄÅÔºö*Ê¥ªË∑É‰∏≠*
- ‚è±Ô∏è ÂìçÂ∫îÊó∂Èó¥Ôºö< 100ms""",
        "Á≥ªÁªü",
        MessageType.GENERAL
    )
    
    # ÊòæÁ§∫Ê∂àÊÅØ
    cli.display_message(apollo_msg)
    cli.display_message(muses_msg)
    cli.display_message(user_msg)
    cli.display_message(system_msg)
    
    # ÊòæÁ§∫ÂêÑÁßçÁä∂ÊÄÅÊ∂àÊÅØ
    cli.show_success("CLIÁïåÈù¢Âü∫Á°ÄÂäüËÉΩÂÆåÊàê")
    cli.show_info("ËøôÊòØ‰∏Ä‰∏™‰ø°ÊÅØÊèêÁ§∫")
    cli.show_warning("ËøôÊòØ‰∏Ä‰∏™Ë≠¶ÂëäÊèêÁ§∫")
    cli.show_error("ËøôÊòØ‰∏Ä‰∏™ÈîôËØØÊèêÁ§∫")


if __name__ == "__main__":
    demo_cli()